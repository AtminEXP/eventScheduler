{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AtminSheth\\\\Desktop\\\\eventScheduler\\\\eventScheduler\\\\exp-events\\\\src\\\\CalendarComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport axios from 'axios';\nimport '@fullcalendar/daygrid/main.css'; // Import CSS for FullCalendar\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarComponent = () => {\n  _s();\n  const [events, setEvents] = useState([]); // Initialize events state as an empty array\n\n  useEffect(() => {\n    // Fetch events from the backend on component mount\n    axios.get('http://localhost:3001/calendar-events').then(response => {\n      // Transform each event data to match FullCalendar's expected format\n      const transformedEvents = response.data.map(event => ({\n        title: event.title,\n        start: event.start,\n        end: event.end\n        // Add other properties as needed, such as 'description' and 'location'\n      }));\n      setEvents(transformedEvents); // Update the events state with the transformed events\n    }).catch(error => {\n      console.error('Error fetching events:', error);\n    });\n  }, []); // The empty dependency array ensures this effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin] // Use the day grid plugin\n      ,\n      initialView: \"dayGridMonth\" // Set the initial view to show a monthly calendar\n      ,\n      events: events // Pass the events state to the FullCalendar component\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarComponent, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n_c = CalendarComponent;\nexport default CalendarComponent;\nvar _c;\n$RefreshReg$(_c, \"CalendarComponent\");","map":{"version":3,"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","axios","jsxDEV","_jsxDEV","CalendarComponent","_s","events","setEvents","get","then","response","transformedEvents","data","map","event","title","start","end","catch","error","console","children","plugins","initialView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/AtminSheth/Desktop/eventScheduler/eventScheduler/exp-events/src/CalendarComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport axios from 'axios';\r\nimport '@fullcalendar/daygrid/main.css'; // Import CSS for FullCalendar\r\n\r\nconst CalendarComponent = () => {\r\n  const [events, setEvents] = useState([]); // Initialize events state as an empty array\r\n\r\n  useEffect(() => {\r\n    // Fetch events from the backend on component mount\r\n    axios.get('http://localhost:3001/calendar-events')\r\n      .then(response => {\r\n        // Transform each event data to match FullCalendar's expected format\r\n        const transformedEvents = response.data.map(event => ({\r\n          title: event.title,\r\n          start: event.start,\r\n          end: event.end,\r\n          // Add other properties as needed, such as 'description' and 'location'\r\n        }));\r\n        setEvents(transformedEvents); // Update the events state with the transformed events\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching events:', error);\r\n      });\r\n  }, []); // The empty dependency array ensures this effect runs only once on mount\r\n\r\n  return (\r\n    <div>\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin]} // Use the day grid plugin\r\n        initialView=\"dayGridMonth\" // Set the initial view to show a monthly calendar\r\n        events={events} // Pass the events state to the FullCalendar component\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,gCAAgC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACd;IACAG,KAAK,CAACO,GAAG,CAAC,uCAAuC,CAAC,CAC/CC,IAAI,CAACC,QAAQ,IAAI;MAChB;MACA,MAAMC,iBAAiB,GAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,KAAK,KAAK;QACpDC,KAAK,EAAED,KAAK,CAACC,KAAK;QAClBC,KAAK,EAAEF,KAAK,CAACE,KAAK;QAClBC,GAAG,EAAEH,KAAK,CAACG;QACX;MACF,CAAC,CAAC,CAAC;MACHV,SAAS,CAACI,iBAAiB,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CACDO,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEhB,OAAA;IAAAkB,QAAA,eACElB,OAAA,CAACJ,YAAY;MACXuB,OAAO,EAAE,CAACtB,aAAa,CAAE,CAAC;MAAA;MAC1BuB,WAAW,EAAC,cAAc,CAAC;MAAA;MAC3BjB,MAAM,EAAEA,MAAO,CAAC;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CA9BID,iBAAiB;AAAAwB,EAAA,GAAjBxB,iBAAiB;AAgCvB,eAAeA,iBAAiB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}